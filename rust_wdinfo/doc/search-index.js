var searchIndex = JSON.parse('{\
"gpsync":{"doc":"","i":[[5,"main","gpsync","sync WDInfo tables from PostgreSQL into Greenplum in …",null,[[],["result",4]]]],"p":[]},\
"wdinfo":{"doc":"","i":[[0,"wdinfo","wdinfo","WD sync tool",null,null],[3,"WDInfo","wdinfo::wdinfo","WDInfo structdb as database connection (public, to …",null,null],[12,"db","","",0,null],[11,"initialization","","default function for WDInfo",0,[[]]],[11,"wdrefresh","","WD refresh: refresh PostgreSQL table based on files on WD …",0,[[["string",3]],["result",4]]],[11,"wdsync","","WD sync: sync WD net drive and PostgreSQL table based on …",0,[[],["result",4]]],[11,"last_insert_dt","","Check last time refresh of PostgreSQL table based on WD …",0,[[],[["string",3],["result",4]]]],[11,"fs_scan","","Scan WD net drive, get file structure summary",0,[[],[["string",3],["result",4]]]],[11,"str_import_db","","import FileStatus into Database temporary table",0,[[["string",3]],["result",4]]],[11,"wdinfo_update","","update table using temporary table",0,[[],["result",4]]],[11,"wdinfo_refresh","","refresh table using temporary table",0,[[],["result",4]]],[11,"wdinfo_compare","","compare tables for records represent different WD net …",0,[[],[["vec",3],["result",4]]]],[11,"wdinfo_sync_one","","sync WD net drive for one file",0,[[],["result",4]]],[11,"wdinfo_sync","","sync WD net drive for giving file list",0,[[["vec",3],["string",3]],["result",4]]],[0,"sqltrait","wdinfo","TRAIT for data base like postgresql and mysql ",null,null],[5,"url_encode","wdinfo::sqltrait","URL encodein case when your password have symbol out of …",null,[[],["string",3]]],[8,"SQL","","trait SQLfunction definition. implementation will be in …",null,null],[11,"execute_queries_no_return","","",1,[[],["result",4]]],[11,"check_table_exists","","",1,[[],["result",4]]],[11,"drop_table","","",1,[[],["result",4]]],[11,"truncate_table","","",1,[[],["result",4]]],[11,"create_table","","",1,[[],["result",4]]],[11,"create_truncate_table","","",1,[[],["result",4]]],[11,"import_data","","",1,[[["string",3]],["result",4]]],[11,"execute_query_with_return","","",1,[[],[["vec",3],["result",4]]]],[0,"postgresql","wdinfo","PostgreSQL related functions and methods ",null,null],[3,"PostgreSQL","wdinfo::postgresql","PostgreSQLConnect to PostgreSQLExecute queries to …",null,null],[12,"conn","","",2,null],[11,"new","","customer connection",2,[[["string",3]],["result",4]]],[0,"file_status","wdinfo","file status related functions and methods ",null,null],[5,"log_config_path","wdinfo::file_status","get root path for <code>config/log4rs.yaml</code>detailwhen we run …",null,[[],[["string",3],["result",4]]]],[5,"rename_log_with_timestamp","","each run with separate log file by timestamp as suffix in …",null,[[],["result",4]]],[3,"FileStatus","","Get file status, along with basic file operationFile …",null,null],[11,"get_status","","get file status",3,[[["pathbuf",3]],[["result",4],["filestatus",3]]]],[11,"get_file_status_under_folder","","get file status for all files under one folder",3,[[],[["string",3],["result",4]]]],[11,"delete_file","","delete file",3,[[],["result",4]]],[11,"copy_file","","copy file",3,[[],["result",4]]],[0,"libmysql","wdinfo","MySQL related functions and metods ",null,null],[3,"LibMySQL","wdinfo::libmysql","LibMySQLConnect to MySQLExecute queries to MySQLimport …",null,null],[12,"conn","","",4,null],[11,"new","","customer connection",4,[[["string",3]],["result",4]]],[0,"ubuntu","wdinfo","transfer table through databases using rust to call …",null,null],[3,"DBinfo","wdinfo::ubuntu","struct with database information ",null,null],[11,"init","","initialization ",5,[[["string",3]],["result",4]]],[11,"local_clean","","check local file: delete if exist ",5,[[],["result",4]]],[11,"export","","export table from database to local file *  Greenplum on …",5,[[],["result",4]]],[11,"import","","import table from local file *  Greenplum on remote …",5,[[],["result",4]]],[11,"psql_chk_tbl_exist","","check table exsitence using psql * Greenplum on remote …",5,[[],["result",4]]],[11,"psql_tbl_ddl_gen","","create table ddl using psql * Greenplum on remote server …",5,[[],["result",4]]],[11,"tbl_ddl_scp","","scp table ddl from remote to local",5,[[],["result",4]]],[11,"create_tbl_use_ddl","","create table using local ddl",5,[[],["result",4]]],[11,"psql_truncate_tbl","","truncate table using psql * Greenplum on remote server in …",5,[[],["result",4]]],[11,"tbl_ddl_clean","","table ddl clean from both remote and local",5,[[],["result",4]]],[0,"pem","wdinfo","read database related pem file file disk ",null,null],[5,"db_pem","wdinfo::pem","Giving pem file with pull path, read containt as pem info",null,[[],[["vec",3],["result",4]]]],[11,"from","wdinfo::wdinfo","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","wdinfo::postgresql","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","wdinfo::file_status","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","wdinfo::libmysql","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","wdinfo::ubuntu","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"execute_queries_no_return","wdinfo::postgresql","submit query without return values",2,[[],["result",4]]],[11,"check_table_exists","","check if table exist",2,[[],["result",4]]],[11,"drop_table","","drop table",2,[[],["result",4]]],[11,"truncate_table","","truncate table",2,[[],["result",4]]],[11,"create_table","","create table",2,[[],["result",4]]],[11,"import_data","","import data into PostgreSQL table",2,[[["string",3]],["result",4]]],[11,"execute_query_with_return","","submit query and catch the output",2,[[],[["vec",3],["result",4]]]],[11,"execute_queries_no_return","wdinfo::libmysql","submit query without return values",4,[[],["result",4]]],[11,"check_table_exists","","check if table exist",4,[[],["result",4]]],[11,"drop_table","","drop table",4,[[],["result",4]]],[11,"truncate_table","","truncate table",4,[[],["result",4]]],[11,"create_table","","create table",4,[[],["result",4]]],[11,"import_data","","import data into LibMySQL table",4,[[["string",3]],["result",4]]],[11,"execute_query_with_return","","submit query and catch the output",4,[[],[["vec",3],["result",4]]]],[11,"default","wdinfo::postgresql","default method",2,[[]]],[11,"default","wdinfo::libmysql","default method",4,[[]]],[11,"fmt","wdinfo::file_status","",3,[[["formatter",3]],["result",6]]]],"p":[[3,"WDInfo"],[8,"SQL"],[3,"PostgreSQL"],[3,"FileStatus"],[3,"LibMySQL"],[3,"DBinfo"]]},\
"wdsync":{"doc":"","i":[[5,"main","wdsync","main function executable program start from.Use return …",null,[[],["result",4]]],[5,"envargs","","handle command line argumentsOnly allow data music photos …",null,[[],[["string",3],["result",4]]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);