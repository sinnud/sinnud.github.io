var searchIndex = JSON.parse('{\
"lib_wd":{"doc":"","i":[[0,"postgresql","lib_wd","PostgreSQL related functions and metods ",null,null],[3,"PostgreSQL","lib_wd::postgresql","PostgreSQLConnect to PostgreSQLExecute queries to…",null,null],[12,"conn","","",0,null],[5,"url_encode","","URL encodein case when your password have symbol out of…",null,[[],["string",3]]],[11,"new","","customer connection",0,[[["string",3]],["result",4]]],[11,"execute","","submit query without return values",0,[[],["result",4]]],[11,"query","","submit query and catch the output",0,[[],[["result",4],["vec",3]]]],[11,"table_exist","","check if table exist",0,[[],["result",4]]],[11,"drop_table","","drop table",0,[[],["result",4]]],[11,"truncate_table","","truncate table",0,[[],["result",4]]],[11,"create_table","","create table",0,[[],["result",4]]],[11,"create_truncate_table","","create or truncate table",0,[[],["result",4]]],[11,"import_data","","import data into PostgreSQL table",0,[[["string",3]],["result",4]]],[0,"file_status","lib_wd","file status related functions and methods ",null,null],[3,"FileStatus","lib_wd::file_status","Get file status, along with basic file operationFile…",null,null],[5,"log_config_path","","get root path for `config/log4rs.yaml`detailwhen we run…",null,[[],[["string",3],["result",4]]]],[5,"rename_log_with_timestamp","","each run with separate log file by timestamp as suffix in…",null,[[],["result",4]]],[11,"get_status","","get file status",1,[[["pathbuf",3]],[["filestatus",3],["result",4]]]],[11,"get_file_status_under_folder","","get file status for all files under one folder",1,[[],[["string",3],["result",4]]]],[11,"delete_file","","delete file",1,[[],["result",4]]],[11,"copy_file","","copy file",1,[[],["result",4]]],[0,"wdinfo","lib_wd","WD sync tool",null,null],[3,"WDInfo","lib_wd::wdinfo","WDInfo structpg as PostgreSQL connection (public)temporary…",null,null],[12,"pg","","",2,null],[11,"wdrefresh","","WD refresh: refresh PostgreSQL table based on files on WD…",2,[[],["result",4]]],[11,"wdsync","","WD sync: sync WD net drive and PostgreSQL table based on…",2,[[],["result",4]]],[11,"new","","WDInfo initialization, other than default",2,[[["string",3]],["result",4]]],[11,"new_special","","WDInfo initialization, other than default",2,[[["string",3]],["result",4]]],[11,"last_insert_dt","","Check last time refresh of PostgreSQL table based on WD…",2,[[],[["string",3],["result",4]]]],[11,"fs_import_pg","","Check WD net drive, import FileStatus into PostgreSQL…",2,[[],["result",4]]],[11,"wdinfo_update","","update table using temporary table",2,[[],["result",4]]],[11,"wdinfo_refresh","","refresh table using temporary table",2,[[],["result",4]]],[11,"wdinfo_compare","","compare tables for records represent different WD net…",2,[[],[["result",4],["vec",3]]]],[11,"wdinfo_sync_one","","sync WD net drive for one file",2,[[],["result",4]]],[11,"wdinfo_sync","","sync WD net drive for giving file list",2,[[["vec",3],["string",3]],["result",4]]],[0,"envargs","lib_wd","check command line argument ",null,null],[5,"envargs","lib_wd::envargs","check command line argumentno argument is default, do all…",null,[[],[["string",3],["result",4]]]],[11,"from","lib_wd::postgresql","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","lib_wd::file_status","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","lib_wd::wdinfo","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"default","lib_wd::postgresql","default method",0,[[]]],[11,"default","lib_wd::wdinfo","default function for WDInfo",2,[[]]],[11,"fmt","lib_wd::file_status","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"PostgreSQL"],[3,"FileStatus"],[3,"WDInfo"]]},\
"wdinfo":{"doc":"","i":[[5,"main","wdinfo","main function executable program start from.Use return…",null,[[],["result",4]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);